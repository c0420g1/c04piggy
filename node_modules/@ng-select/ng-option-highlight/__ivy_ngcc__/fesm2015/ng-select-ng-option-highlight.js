import { __decorate } from 'tslib';
import { ElementRef, Renderer2, Input, Directive, NgModule } from '@angular/core';

import * as ɵngcc0 from '@angular/core';
let NgOptionHighlightDirective = class NgOptionHighlightDirective {
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.element = this.elementRef.nativeElement;
    }
    ngOnChanges() {
        if (this._canHighlight) {
            this._highlightLabel();
        }
    }
    ngAfterViewInit() {
        this.label = this.element.innerHTML;
        if (this._canHighlight) {
            this._highlightLabel();
        }
    }
    _escapeRegExp(str) {
        return str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    _highlightLabel() {
        const label = this.label;
        if (!this.term) {
            this._setInnerHtml(label);
            return;
        }
        const alternationString = this._escapeRegExp(this.term).replace(' ', '|');
        const termRegex = new RegExp(alternationString, 'gi');
        this._setInnerHtml(label.replace(termRegex, `<span class=\"highlighted\">$&</span>`));
    }
    get _canHighlight() {
        return this._isDefined(this.term) && this._isDefined(this.label);
    }
    _setInnerHtml(html) {
        this.renderer.setProperty(this.elementRef.nativeElement, 'innerHTML', html);
    }
    _isDefined(value) {
        return value !== undefined && value !== null;
    }
};
NgOptionHighlightDirective.ɵfac = function NgOptionHighlightDirective_Factory(t) { return new (t || NgOptionHighlightDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
NgOptionHighlightDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgOptionHighlightDirective, selectors: [["", "ngOptionHighlight", ""]], inputs: { term: ["ngOptionHighlight", "term"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
NgOptionHighlightDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
__decorate([
    Input('ngOptionHighlight')
], NgOptionHighlightDirective.prototype, "term", void 0);

let NgOptionHighlightModule = class NgOptionHighlightModule {
};
NgOptionHighlightModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgOptionHighlightModule });
NgOptionHighlightModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgOptionHighlightModule_Factory(t) { return new (t || NgOptionHighlightModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgOptionHighlightDirective, [{
        type: Directive,
        args: [{
                selector: '[ngOptionHighlight]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { term: [{
            type: Input,
            args: ['ngOptionHighlight']
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgOptionHighlightModule, { declarations: [NgOptionHighlightDirective], exports: [NgOptionHighlightDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgOptionHighlightModule, [{
        type: NgModule,
        args: [{
                declarations: [NgOptionHighlightDirective],
                exports: [NgOptionHighlightDirective]
            }]
    }], null, null); })();

/*
 * Public API Surface of ng-option-highlight
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgOptionHighlightDirective, NgOptionHighlightModule };

//# sourceMappingURL=ng-select-ng-option-highlight.js.map