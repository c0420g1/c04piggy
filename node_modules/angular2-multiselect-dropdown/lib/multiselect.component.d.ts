import { OnInit, OnDestroy, SimpleChanges, OnChanges, ChangeDetectorRef, AfterViewChecked, EventEmitter, ElementRef } from '@angular/core';
import { ControlValueAccessor, Validator, FormControl } from '@angular/forms';
import { DropdownSettings } from './multiselect.interface';
import { ListFilterPipe } from './list-filter';
import { Item, Badge, Search } from './menu-item';
import { DataService } from './multiselect.service';
import { Subscription, Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './clickOutside';
import * as ɵngcc2 from './list-filter';
import * as ɵngcc3 from './menu-item';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '@angular/forms';
import * as ɵngcc6 from './virtual-scroll/virtual-scroll';
export declare const DROPDOWN_CONTROL_VALUE_ACCESSOR: any;
export declare const DROPDOWN_CONTROL_VALIDATION: any;
export declare class AngularMultiSelect implements OnInit, ControlValueAccessor, OnChanges, Validator, AfterViewChecked, OnDestroy {
    _elementRef: ElementRef;
    private cdr;
    private ds;
    data: Array<any>;
    settings: DropdownSettings;
    loading: boolean;
    onSelect: EventEmitter<any>;
    onDeSelect: EventEmitter<any>;
    onSelectAll: EventEmitter<Array<any>>;
    onDeSelectAll: EventEmitter<Array<any>>;
    onOpen: EventEmitter<any>;
    onClose: EventEmitter<any>;
    onScrollToEnd: EventEmitter<any>;
    onFilterSelectAll: EventEmitter<Array<any>>;
    onFilterDeSelectAll: EventEmitter<Array<any>>;
    onAddFilterNewItem: EventEmitter<any>;
    onGroupSelect: EventEmitter<any>;
    onGroupDeSelect: EventEmitter<any>;
    itemTempl: Item;
    badgeTempl: Badge;
    searchTempl: Search;
    searchInput: ElementRef;
    selectedListElem: ElementRef;
    dropdownListElem: ElementRef;
    onEscapeDown(event: KeyboardEvent): void;
    virtualdata: any;
    searchTerm$: Subject<string>;
    filterPipe: ListFilterPipe;
    selectedItems: Array<any>;
    isActive: boolean;
    isSelectAll: boolean;
    isFilterSelectAll: boolean;
    isInfiniteFilterSelectAll: boolean;
    groupedData: Array<any>;
    filter: any;
    chunkArray: any[];
    scrollTop: any;
    chunkIndex: any[];
    cachedItems: any[];
    groupCachedItems: any[];
    totalRows: any;
    itemHeight: any;
    screenItemsLen: any;
    cachedItemsLen: any;
    totalHeight: any;
    scroller: any;
    maxBuffer: any;
    lastScrolled: any;
    lastRepaintY: any;
    selectedListHeight: any;
    filterLength: any;
    infiniteFilterLength: any;
    viewPortItems: any;
    item: any;
    dropdownListYOffset: number;
    subscription: Subscription;
    defaultSettings: DropdownSettings;
    randomSize: boolean;
    parseError: boolean;
    filteredList: any;
    virtualScroollInit: boolean;
    private virtualScroller;
    isDisabledItemPresent: boolean;
    constructor(_elementRef: ElementRef, cdr: ChangeDetectorRef, ds: DataService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    onItemClick(item: any, index: number, evt: Event): boolean;
    validate(c: FormControl): any;
    private onTouchedCallback;
    private onChangeCallback;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    trackByFn(index: number, item: any): any;
    isSelected(clickedItem: any): boolean;
    addSelected(item: any): void;
    removeSelected(clickedItem: any): void;
    toggleDropdown(evt: any): boolean;
    openDropdown(): boolean;
    closeDropdown(): void;
    closeDropdownOnClickOut(): void;
    toggleSelectAll(event: any): void;
    filterGroupedList(): void;
    toggleFilterSelectAll(): void;
    toggleInfiniteFilterSelectAll(): void;
    clearSearch(): void;
    onFilterChange(data: any): void;
    cloneArray(arr: any): any;
    updateGroupInfo(item: any): boolean;
    transformData(arr: Array<any>, field: any): Array<any>;
    filterInfiniteList(evt: any): void;
    resetInfiniteSearch(): void;
    onScrollEnd(e: any): void;
    ngOnDestroy(): void;
    selectGroup(item: any): boolean;
    addFilterNewItem(): void;
    calculateDropdownDirection(): void;
    openTowardsTop(value: boolean): void;
    clearSelection(e: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularMultiSelect, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AngularMultiSelect, "angular2-multiselect", never, { "settings": "settings"; "data": "data"; "loading": "loading"; }, { "onSelect": "onSelect"; "onDeSelect": "onDeSelect"; "onSelectAll": "onSelectAll"; "onDeSelectAll": "onDeSelectAll"; "onOpen": "onOpen"; "onClose": "onClose"; "onScrollToEnd": "onScrollToEnd"; "onFilterSelectAll": "onFilterSelectAll"; "onFilterDeSelectAll": "onFilterDeSelectAll"; "onAddFilterNewItem": "onAddFilterNewItem"; "onGroupSelect": "onGroupSelect"; "onGroupDeSelect": "onGroupDeSelect"; }, ["itemTempl", "badgeTempl", "searchTempl"], never>;
}
export declare class AngularMultiSelectModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<AngularMultiSelectModule, [typeof AngularMultiSelect, typeof ɵngcc1.ClickOutsideDirective, typeof ɵngcc1.ScrollDirective, typeof ɵngcc1.styleDirective, typeof ɵngcc2.ListFilterPipe, typeof ɵngcc3.Item, typeof ɵngcc3.TemplateRenderer, typeof ɵngcc3.Badge, typeof ɵngcc3.Search, typeof ɵngcc1.setPosition, typeof ɵngcc3.CIcon], [typeof ɵngcc4.CommonModule, typeof ɵngcc5.FormsModule, typeof ɵngcc6.VirtualScrollerModule], [typeof AngularMultiSelect, typeof ɵngcc1.ClickOutsideDirective, typeof ɵngcc1.ScrollDirective, typeof ɵngcc1.styleDirective, typeof ɵngcc2.ListFilterPipe, typeof ɵngcc3.Item, typeof ɵngcc3.TemplateRenderer, typeof ɵngcc3.Badge, typeof ɵngcc3.Search, typeof ɵngcc1.setPosition, typeof ɵngcc3.CIcon]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<AngularMultiSelectModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGlzZWxlY3QuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm11bHRpc2VsZWN0LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkluaXQsIE9uRGVzdHJveSwgU2ltcGxlQ2hhbmdlcywgT25DaGFuZ2VzLCBDaGFuZ2VEZXRlY3RvclJlZiwgQWZ0ZXJWaWV3Q2hlY2tlZCwgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgVmFsaWRhdG9yLCBGb3JtQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IERyb3Bkb3duU2V0dGluZ3MgfSBmcm9tICcuL211bHRpc2VsZWN0LmludGVyZmFjZSc7XG5pbXBvcnQgeyBMaXN0RmlsdGVyUGlwZSB9IGZyb20gJy4vbGlzdC1maWx0ZXInO1xuaW1wb3J0IHsgSXRlbSwgQmFkZ2UsIFNlYXJjaCB9IGZyb20gJy4vbWVudS1pdGVtJztcbmltcG9ydCB7IERhdGFTZXJ2aWNlIH0gZnJvbSAnLi9tdWx0aXNlbGVjdC5zZXJ2aWNlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgRFJPUERPV05fQ09OVFJPTF9WQUxVRV9BQ0NFU1NPUjogYW55O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgRFJPUERPV05fQ09OVFJPTF9WQUxJREFUSU9OOiBhbnk7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBbmd1bGFyTXVsdGlTZWxlY3QgaW1wbGVtZW50cyBPbkluaXQsIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBPbkNoYW5nZXMsIFZhbGlkYXRvciwgQWZ0ZXJWaWV3Q2hlY2tlZCwgT25EZXN0cm95IHtcbiAgICBfZWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgICBwcml2YXRlIGNkcjtcbiAgICBwcml2YXRlIGRzO1xuICAgIGRhdGE6IEFycmF5PGFueT47XG4gICAgc2V0dGluZ3M6IERyb3Bkb3duU2V0dGluZ3M7XG4gICAgbG9hZGluZzogYm9vbGVhbjtcbiAgICBvblNlbGVjdDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25EZVNlbGVjdDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25TZWxlY3RBbGw6IEV2ZW50RW1pdHRlcjxBcnJheTxhbnk+PjtcbiAgICBvbkRlU2VsZWN0QWxsOiBFdmVudEVtaXR0ZXI8QXJyYXk8YW55Pj47XG4gICAgb25PcGVuOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkNsb3NlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvblNjcm9sbFRvRW5kOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkZpbHRlclNlbGVjdEFsbDogRXZlbnRFbWl0dGVyPEFycmF5PGFueT4+O1xuICAgIG9uRmlsdGVyRGVTZWxlY3RBbGw6IEV2ZW50RW1pdHRlcjxBcnJheTxhbnk+PjtcbiAgICBvbkFkZEZpbHRlck5ld0l0ZW06IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uR3JvdXBTZWxlY3Q6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uR3JvdXBEZVNlbGVjdDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgaXRlbVRlbXBsOiBJdGVtO1xuICAgIGJhZGdlVGVtcGw6IEJhZGdlO1xuICAgIHNlYXJjaFRlbXBsOiBTZWFyY2g7XG4gICAgc2VhcmNoSW5wdXQ6IEVsZW1lbnRSZWY7XG4gICAgc2VsZWN0ZWRMaXN0RWxlbTogRWxlbWVudFJlZjtcbiAgICBkcm9wZG93bkxpc3RFbGVtOiBFbGVtZW50UmVmO1xuICAgIG9uRXNjYXBlRG93bihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgdmlydHVhbGRhdGE6IGFueTtcbiAgICBzZWFyY2hUZXJtJDogU3ViamVjdDxzdHJpbmc+O1xuICAgIGZpbHRlclBpcGU6IExpc3RGaWx0ZXJQaXBlO1xuICAgIHNlbGVjdGVkSXRlbXM6IEFycmF5PGFueT47XG4gICAgaXNBY3RpdmU6IGJvb2xlYW47XG4gICAgaXNTZWxlY3RBbGw6IGJvb2xlYW47XG4gICAgaXNGaWx0ZXJTZWxlY3RBbGw6IGJvb2xlYW47XG4gICAgaXNJbmZpbml0ZUZpbHRlclNlbGVjdEFsbDogYm9vbGVhbjtcbiAgICBncm91cGVkRGF0YTogQXJyYXk8YW55PjtcbiAgICBmaWx0ZXI6IGFueTtcbiAgICBjaHVua0FycmF5OiBhbnlbXTtcbiAgICBzY3JvbGxUb3A6IGFueTtcbiAgICBjaHVua0luZGV4OiBhbnlbXTtcbiAgICBjYWNoZWRJdGVtczogYW55W107XG4gICAgZ3JvdXBDYWNoZWRJdGVtczogYW55W107XG4gICAgdG90YWxSb3dzOiBhbnk7XG4gICAgaXRlbUhlaWdodDogYW55O1xuICAgIHNjcmVlbkl0ZW1zTGVuOiBhbnk7XG4gICAgY2FjaGVkSXRlbXNMZW46IGFueTtcbiAgICB0b3RhbEhlaWdodDogYW55O1xuICAgIHNjcm9sbGVyOiBhbnk7XG4gICAgbWF4QnVmZmVyOiBhbnk7XG4gICAgbGFzdFNjcm9sbGVkOiBhbnk7XG4gICAgbGFzdFJlcGFpbnRZOiBhbnk7XG4gICAgc2VsZWN0ZWRMaXN0SGVpZ2h0OiBhbnk7XG4gICAgZmlsdGVyTGVuZ3RoOiBhbnk7XG4gICAgaW5maW5pdGVGaWx0ZXJMZW5ndGg6IGFueTtcbiAgICB2aWV3UG9ydEl0ZW1zOiBhbnk7XG4gICAgaXRlbTogYW55O1xuICAgIGRyb3Bkb3duTGlzdFlPZmZzZXQ6IG51bWJlcjtcbiAgICBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgICBkZWZhdWx0U2V0dGluZ3M6IERyb3Bkb3duU2V0dGluZ3M7XG4gICAgcmFuZG9tU2l6ZTogYm9vbGVhbjtcbiAgICBwYXJzZUVycm9yOiBib29sZWFuO1xuICAgIGZpbHRlcmVkTGlzdDogYW55O1xuICAgIHZpcnR1YWxTY3Jvb2xsSW5pdDogYm9vbGVhbjtcbiAgICBwcml2YXRlIHZpcnR1YWxTY3JvbGxlcjtcbiAgICBpc0Rpc2FibGVkSXRlbVByZXNlbnQ6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IoX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIGRzOiBEYXRhU2VydmljZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZDtcbiAgICBvbkl0ZW1DbGljayhpdGVtOiBhbnksIGluZGV4OiBudW1iZXIsIGV2dDogRXZlbnQpOiBib29sZWFuO1xuICAgIHZhbGlkYXRlKGM6IEZvcm1Db250cm9sKTogYW55O1xuICAgIHByaXZhdGUgb25Ub3VjaGVkQ2FsbGJhY2s7XG4gICAgcHJpdmF0ZSBvbkNoYW5nZUNhbGxiYWNrO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZDtcbiAgICB0cmFja0J5Rm4oaW5kZXg6IG51bWJlciwgaXRlbTogYW55KTogYW55O1xuICAgIGlzU2VsZWN0ZWQoY2xpY2tlZEl0ZW06IGFueSk6IGJvb2xlYW47XG4gICAgYWRkU2VsZWN0ZWQoaXRlbTogYW55KTogdm9pZDtcbiAgICByZW1vdmVTZWxlY3RlZChjbGlja2VkSXRlbTogYW55KTogdm9pZDtcbiAgICB0b2dnbGVEcm9wZG93bihldnQ6IGFueSk6IGJvb2xlYW47XG4gICAgb3BlbkRyb3Bkb3duKCk6IGJvb2xlYW47XG4gICAgY2xvc2VEcm9wZG93bigpOiB2b2lkO1xuICAgIGNsb3NlRHJvcGRvd25PbkNsaWNrT3V0KCk6IHZvaWQ7XG4gICAgdG9nZ2xlU2VsZWN0QWxsKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGZpbHRlckdyb3VwZWRMaXN0KCk6IHZvaWQ7XG4gICAgdG9nZ2xlRmlsdGVyU2VsZWN0QWxsKCk6IHZvaWQ7XG4gICAgdG9nZ2xlSW5maW5pdGVGaWx0ZXJTZWxlY3RBbGwoKTogdm9pZDtcbiAgICBjbGVhclNlYXJjaCgpOiB2b2lkO1xuICAgIG9uRmlsdGVyQ2hhbmdlKGRhdGE6IGFueSk6IHZvaWQ7XG4gICAgY2xvbmVBcnJheShhcnI6IGFueSk6IGFueTtcbiAgICB1cGRhdGVHcm91cEluZm8oaXRlbTogYW55KTogYm9vbGVhbjtcbiAgICB0cmFuc2Zvcm1EYXRhKGFycjogQXJyYXk8YW55PiwgZmllbGQ6IGFueSk6IEFycmF5PGFueT47XG4gICAgZmlsdGVySW5maW5pdGVMaXN0KGV2dDogYW55KTogdm9pZDtcbiAgICByZXNldEluZmluaXRlU2VhcmNoKCk6IHZvaWQ7XG4gICAgb25TY3JvbGxFbmQoZTogYW55KTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHNlbGVjdEdyb3VwKGl0ZW06IGFueSk6IGJvb2xlYW47XG4gICAgYWRkRmlsdGVyTmV3SXRlbSgpOiB2b2lkO1xuICAgIGNhbGN1bGF0ZURyb3Bkb3duRGlyZWN0aW9uKCk6IHZvaWQ7XG4gICAgb3BlblRvd2FyZHNUb3AodmFsdWU6IGJvb2xlYW4pOiB2b2lkO1xuICAgIGNsZWFyU2VsZWN0aW9uKGU6IGFueSk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBbmd1bGFyTXVsdGlTZWxlY3RNb2R1bGUge1xufVxuIl19